#%RAML 1.0
---
title: Habla
version: v0.1.6
baseUri: https://api.habla.ai
mediaType:  application/json

documentation:
   - title: Overview
     content: |
         TODO: Overall description here...
         <br /><br />
         **Additional Possible Responses for All Endpoints**
         <br />
         503 SERVICE_UNAVAILABLE
         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A server error has occurred, typically Redis, DynamoDB, or other remote service availability.
         <br />
         500 INTERNAL_SERVER_ERROR
         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A server error has occurred, typically unforseen or unaccounted for.  Most likely a logic error.
         <br /><br />
         **Additional Possible Responses for Post/Put/Patch Endpoints**
         <br />
         400 BAD_REQUEST
         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invalid format in the body of the request.
   - title: Authentication
     content: |
         TODO: Auth overall description here...


/auth:

   /login:
      post:
         description: |
            Login to Habla API, receiving a JWT token for use in authenticated requests.
            <br /><br />
            Returns a valid [JWT token](http://jwt.io), along with public user details if successful (200-OK).
            This token must be stored for future API requests.
            <br /><br />
            A token will expire after a customer-specified session timeout (1 hour by default).
            A logout function may be implemented client-side that destroys the token in the client framework; however, the token will remain active until its expiry time has been exceeded.
            For this reason, it is recommended that the token be stored in a secure cookie on web clients or some secure storage mechanism for other applications.
            <br /><br />
            For security reasons, separate messages will not be provided for user not found versus authentication failure.
            This is to prevent information leakage to malicious users.
         body:
            application/x-www-form-urlencoded:
               properties:
                  username:
                     description: The user name to authenticate.
                     type: string
                     required: true
                     example: anthony.daga%40habla.ai
                  pasword:
                     description: The password to authenticate.
                     type: string
                     required: true
                     example: HelloWorld#123
         responses:
            200:
               description: |
                  OK<br />
                  The token is the JWT used in authenticated API calls requiring security.
               body:
                  properties:
                     status:
                        type: string
                        required: true
                     token:
                        type: string
                        required: true
                     user:
                        type: object
                        properties:
                           userId:
                              type: string
                              required: true
                           username:
                              type: string
                              required: true
                           email:
                              type: string
                              required: true
                           firstName:
                              type: string
                              required: true
                           lastName:
                              type: string
                              required: true
                           displayName:
                              type: string
                              required: true
                           country:
                              type: string
                              required: true
                           timeZone:
                              type: string
                              required: true
                           icon:
                              description: Base64 representation.
                              type: string | nil
                              required: false
                              default: nil
                           userType:
                              type: string
                              required: true
                           preferences:
                              type: object
                              required: true
                              properties:
                                 private:
                                    description: Private preferences only available to the user.
                                    type: object
                                    required: true
                     websocketUrl:
                        description: URL for socket.io connection.
                        type: string
                        required: true
                  example: |
                     {
                        "status": "SUCCESS",
                        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFudGhvbnlAaGFibGEuaW8iLCJpYXQiOjE0OTE0MjgzMTN9.pWU5yv5JvNMe6Tm1o7oKlI6cHmcmJZP5m20n-UXJzc0",
                        "user": {
                           "userId": "9dec8947-0381-4809-a053-b56777f782f4",
                           "username": "anthony@habla.io",
                           "email": "anthony@habla.io",
                           "firstName": "Anthony",
                           "lastName": "Daga",
                           "displayName": "Anthony Dude Daga",
                           "country": "US",
                           "timeZone": "America/Los_Angeles",
                           "icon": null,
                           "userType": "hablaUser",
                           "preferences": {
                              "iconColor": "red",
                              "private": {
                                 "lastWindowLocation": "110, 64"
                              }
                           }
                        },
                        "websocketUrl": "http://localhost:3000"
                     }
            401:
               description: |
                  UNAUTHORIZED<br />
                  No reason is given for privacy purposes, but could be an unknown username or bad password.


/users:

   /registerUser:
      post:
         description: |
            If a user submits a registration for a valid email address (formatted correctly), the service responds with a 200-OK status and a payload.  The payload includes a uuid field, which contains the reservation-id for the user.  The reservation-id is used by the validateEmail endpoint to mitigate hacking risks, and locates the associated email address in the Redis cache.  This registration is stored in cache for a defined time-to-live (TTL).  If the user does not respond to the email and complete registration prior to expiration of the registration, they must register again.
            <br /><br />
            A reservation is a uniquely generated key used in the process of securely registering a new user.
            It is used in initial communication through email, web, and mobile clients.
            There can be multiple reservations for a user/email concurrently existing, as actual registered user uniqueness is enforced later in the process when the user is actually created in the system.
            The default expiration of a reservation is 30 minutes, after which it is cleared from cache and no longer valid.
         body:
            application/x-www-form-urlencoded:
               properties:
                  email:
                     description: |
                        The email address to register.
                        Should be validated client-side prior to invocation to ensure that a properly formatted email address has been provided by the calling application.
                     type: string
                     required: true
                     example: anthony.daga%40habla.ai
         responses:
            201:
               description: |
                  CREATED<br />
                  The uuid is the Reservation ID (rid).
                  TODO: Was 200 OK.
               body:
                  properties:
                     status:
                        type: string
                        required: true
                        example: SUCCESS
                     uuid:
                        type: string
                        required: true
                        example: 9dec8947-0381-4809-a053-b56777f782f4
                  example: |
                     {
                       "status": "SUCCESS",
                       "uuid": "9dec8947-0381-4809-a053-b56777f782f4"
                     }
            400:
               description: |
                  BAD_REQUEST<br />
                  No reason is given for privacy purposes, but could be an unknown username or bad password.

   /validateEmail:
      /{rid}:
         uriParameters:
            rid:
               description: Reservation ID (rid).
         get:
            description: |
               Retrieve the email address associated with a Reservation ID (`rid`).
               <br /><br />
               The reservation should have been previously created from the `POST /users/registerUser` endpoint, and is valid until expired.
               Use this method to obtain the email address associated with a rid, typically for display purposes.
            responses:
               200:
                  description: |
                     OK<br />
                     The uuid is the Reservation ID (rid).
                  body:
                     properties:
                        status:
                           type: string
                           required: true
                           example: SUCCESS
                        email:
                           type: string
                           required: true
                           example: anthony.daga%40habla.ai
                     example: |
                        {
                          "status": "SUCCESS",
                          "email": "anthony.daga%40habla.ai"
                        }
               404:
                  description: |
                     NOT_FOUND<br />
                     The Reservation ID either does not exist or is no longer valid (i.e. expired).

   /createUser:
      post:
         description: |
            Create a user in Habla.
            <br /><br />
            TODO: Was /users.
         body:
            properties:
               firstName:
                  type: string
                  required: true
                  example: Anthony
               lastName:
                  type: string
                  required: true
                  example: Daga
               displayName:
                  type: string
                  required: true
                  example: Dude
               email:
                  type: string
                  required: true
                  example: anthony.daga@habla.ai
               password:
                  type: string
                  required: true
                  description: Clear text password.
                  example: HelloWorld#123
               country:
                  description: |
                     [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) representation.
                  type: string
                  required: true
                  example: US
               timeZone:
                  type: string
                  required: true
                  example: America/Los_Angeles
               icon:
                  description: The user's avatar, base64 of image.
                  type: string | nil
                  required: false
                  default: nil
               preferences:
                  type: object
                  required: false
                  properties:
                     private:
                        description: Private preferences only available to the user.
                        type: object
                        required: false
            example: |
               {
                  "firstName": "Anthony",
                  "lastName": "Daga",
                  "displayName": "Dude",
                  "email": "anthony.daga@habla.ai",
                  "password": "HelloWorld#123",
                  "country": "US",
                  "timeZone": "America/Los_Angeles",
                  "icon": null,
                  "preferences": {
                     "iconColor": "red",
                     "private": {
                        "lastWindowLocation": "110, 64"
                     }
                  }
               }
         responses:
            201:
               description: |
                  CREATED
                  <br />TODO: Was 200 OK.
            403:
               description: |
                  FORBIDDEN<br />
                  The user (specifically email) is already registered.

   /updateUser:
      patch:
         description: |
            Update a user in Habla.
         body:
            properties:
               firstName:
                  type: string
                  required: true
                  example: Anthony
               lastName:
                  type: string
                  required: true
                  example: Daga
               displayName:
                  type: string
                  required: true
                  example: Dude
               country:
                  description: |
                     [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) representation.
                  type: string
                  required: true
                  example: US
               timeZone:
                  type: string
                  required: true
                  example: America/Los_Angeles
               icon:
                  description: The user's avatar, base64 of image.
                  type: string | nil
                  required: false
               preferences:
                  type: object
                  required: false
                  properties:
                     private:
                        description: Private preferences only available to the user.
                        type: object
                        required: false
            example: |
               {
                  "firstName": "Anthony",
                  "lastName": "Daga",
                  "displayName": "Dude",
                  "country": "US",
                  "timeZone": "America/Los_Angeles",
                  "icon": null,
                  "preferences": {
                     "iconColor": "red",
                     "private": {
                        "lastWindowLocation": "110, 64"
                     }
                  }
               }
         responses:
            204:
               description: |
                  NO_CONTENT<br />
                  The user was updated successfully.
            404:
               description: |
                  NOT_FOUND<br />
                  The user was not found.

   /updatePublicPreferences:
      /{userId}:
         uriParameters:
            userId:
               description: The `userId` of the user to update preferences of.
         patch:
            description: |
               Update a user public preferences.
            body:
               properties:
                  preferences:
                     description: |
                        Any properties tied to this user, to be shared typically by clients (ex. mobile, web).
                        The property `private` is reserved and not to be used as the name of a property.
                     type: object
                     required: true
               example: |
                  {
                     "preferences": {
                        "iconColor": "red"
                     }
                  }
            responses:
               204:
                  description: |
                     NO_CONTENT<br />
                     The user was updated successfully.
               404:
                  description: |
                     NOT_FOUND<br />
                     The user was not found.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user is not allowed to create an organization.


/subscriberOrgs:

   /getSubscriberOrgs:
      get:
         description: |
            Retrieve the organizations that the authenticated user is privy to.
         responses:
            200:
               description: |
                  OK
               body:
                  properties:
                     subscriberOrgs:
                        type: array
                        required: true
                        items:
                           properties:
                              subscriberOrgId:
                                 type: string
                                 required: true
                              name:
                                 type: string
                                 required: true
                              preferences:
                                 type: object
                                 required: true
                  example: |
                     {
                        "subscriberOrgs": [
                           {
                              "subscriberOrgId": "ea794510-cea6-4132-0008-a7ae1d32abb5",
                              "name": "Anthony Daga",
                              "preferences": {
                              }
                           },
                           {
                              "subscriberOrgId": "ea794510-cea6-4132-0008-a7ae1d32abb5",
                              "name": "Acme",
                              "preferences": {
                              }
                           }
                        ]
                     }

   /createSubscriberOrg:
      post:
         description: |
            Create a subscriber organization in Habla.
            <br />
            TODO: Assign to userId or email.
         body:
            properties:
               name:
                  type: string
                  required: true
               preferences:
                  type: object
                  required: false
                  properties:
                     private:
                        description: Private preferences only available to the organization administrators.
                        type: object
                        required: false
            example: |
               {
                  "name": "My Org"
               }
         responses:
            201:
               description: CREATED
               body:
                  properties:
                     subscriberOrgId:
                        type: string
                        required: true
                        example: 9dec8947-0381-4809-a053-b56777f782f4
                  example: |
                     {
                       "subscriberOrgId": "9dec8947-0381-4809-a053-b56777f782f4",
                       "name": "Acme"
                     }
            409:
               description: |
                  CONFLICT<br />
                  A subscriber org by the requested name already exists.
            403:
               description: |
                  FORBIDDEN<br />
                  The user is not allowed to create an organization.

   /updateSubscriberOrg:
      /{subscriberOrgId}:
         uriParameters:
            subscriberOrgId:
               description: Subscriber Org ID to update.
         patch:
            description: |
               Update a subscriber organization in Habla.
            body:
               properties:
                  name:
                     type: string
                     required: false
                  preferences:
                     type: object
                     required: false
                     properties:
                        private:
                           description: Private preferences only available to the organization administrators.
                           type: object
                           required: false
               example: |
                  {
                     "name": "My Org"
                  }
            responses:
               204:
                  description: |
                     NO_CONTENT<br />
                     The subscriberOrg was updated successfully.
               404:
                  description: |
                     NOT_FOUND<br />
                     The `subscriberOrg` with the specified ID was not found.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user is not allowed to update the specified organization.

   /getSubscribers:
      /{subscriberOrgId}:
         uriParameters:
            subscriberOrgId:
               description: Subscriber Org ID.
         get:
            description: |
               Retrieve the subscribers (i.e. users) of an organization given the subscriber org ID.
            responses:
               200:
                  description: |
                     OK
                  body:
                     properties:
                        subscribers:
                           type: array
                           required: true
                           items:
                              properties:
                                 userId:
                                    type: string
                                    required: true
                                 firstName:
                                    type: string
                                    required: true
                                 lastName:
                                    type: string
                                    required: true
                                 displayName:
                                    type: string
                                    required: true
                                 icon:
                                    description: Base64 representation.
                                    type: string | nil
                                    required: false
                                    default: nil
                                 userType:
                                    type: string
                                    required: true
                                 preferences:
                                    type: object
                                    required: true
                     example: |
                        {
                           "subscribers": [
                              {
                                 "userId": "9dec8947-0381-4809-a053-b56777f782f4",
                                 "firstName": "Anthony",
                                 "lastName": "Daga",
                                 "displayName": "Anthony Dude Daga",
                                 "icon": null,
                                 "userType": "hablaUser",
                                 "preferences": {
                                 }
                              },
                              {
                                 "userId": "9dec8947-0381-4809-a053-b56777f782f5",
                                 "firstName": "Jill",
                                 "lastName": "Goodacre",
                                 "displayName": "Jill Goodacre",
                                 "icon": null,
                                 "userType": "hablaUser",
                                 "preferences": {
                                 }
                              }
                           ]
                        }
               404:
                  description: |
                     NOT_FOUND<br />
                     The subscriber organization with the given `subscriberOrgId` doesn't exist.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to view this subscriber organization.

   /inviteSubscribers:
      /{subscriberOrgId}:
         uriParameters:
            subscriberOrgId:
               description: subscriberOrg ID to invite users to.
         post:
            description: |
               Invite a user to the specified subscriberOrg.
               The requesting user must be an admin of the specified subscriberOrg.
            body:
               properties:
                  userIdOrEmails:
                     type: array
                     required: true
                     minItems: 1
                     items:
                        type: string
                        required: true
               example: |
                  {
                     "userIdOrEmails": [
                        "9dec8947-0381-4809-a053-b56777f782f4",
                        "anthony@habla.ai"
                     ]
                  }
            responses:
               202:
                  description: |
                     ACCEPTED<br />
                     The specified users have been invited and pending acceptance.
               404:
                  description: |
                     NOT_FOUND<br />
                     The subscriberOrg with the given `subscriberOrgId` doesn't exist, or any specified userIds don't exist.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to invite users to this subscriberOrg.

   /replyToInvite:
      /{subscriberOrgId}:
         uriParameters:
            subscriberOrgId:
               description: subscriberOrg ID to accept/decline invite to.
         post:
            description: |
               Accept or decline an invite to the specified subscriberOrg.
            body:
               properties:
                  accept:
                     type: boolean
                     required: true
               example: |
                  {
                     "accept": true
                  }
            responses:
               200:
                  description: |
                     OK<br />
                     The specified users has been added as a subscriber to the subscriberOrg.
               404:
                  description: |
                     NOT_FOUND<br />
                     The invitation or subscriberOrg was not found.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to reply to the invite.


/teams:

   /getTeams:
      get:
         description: |
            Retrieve the teams that the authenticated user is privy to.
         queryParameters:
            subscriberOrgId:
               description: Narrow the results to teams of a subscriber organization.
               type: string
               required: false
               example: /teams/getTeams?subscriberOrgIdId=9dec8947-0381-4809-a053-b56777f782f4
         responses:
            200:
               description: |
                  OK
               body:
                  properties:
                     teams:
                        type: array
                        required: true
                        items:
                           properties:
                              teamId:
                                 type: string
                                 required: true
                              subscriberOrgId:
                                 type: string
                                 required: true
                              name:
                                 type: string
                                 required: true
                  example: |
                     {
                        "teams": [
                           {
                              "teamId": "9dec8947-0381-4809-a053-b56777f782f4",
                              "subscriberOrgId": "ea794510-cea6-4132-0008-a7ae1d32abb5",
                              "name": "Posse"
                           },
                           {
                              "teamId": "9dec8947-0381-4809-a053-b56777f782f5",
                              "subscriberOrgId": "ea794510-cea6-4132-0008-a7ae1d32abb5",
                              "name": "Friends"
                           }
                        ]
                     }

   /createTeam:
      /{subscriberOrgId}:
         uriParameters:
            subscriberOrgId:
               description: Subscriber Org ID to create the team under.
         post:
            description: |
               Create a team within a subscriber organization in Habla.
            body:
               properties:
                  name:
                     type: string
                     required: true
                  preferences:
                     type: object
                     required: false
                     properties:
                        private:
                           description: Private preferences only available to the team administrators.
                           type: object
                           required: false
               example: |
                  {
                     "name": "My Team"
                  }
            responses:
               201:
                  description: CREATED
                  body:
                     properties:
                        teamId:
                           type: string
                           required: true
                        subscriberOrgId:
                           type: string
                           required: true
                        name:
                           type: string
                           required: true
                     example: |
                        {
                           "teamId": "9dec8947-0381-4809-a053-b56777f782f5",
                           "subscriberOrgId": "9dec8947-0381-4809-a053-b56777f782f4",
                           "name": "My Team",
                           "preferences": {
                              "private": {}
                           }
                        }
               409:
                  description: |
                     CONFLICT<br />
                     A team with the specified `name` within the specified subscriber organization (i.e. `subscriberOrgId`) already exists.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user is not allowed to create a team within the specified subscriber organization.

   /updateTeam:
      /{teamId}:
         uriParameters:
            teamId:
               description: Team ID to update.
         patch:
            description: |
               Update a team in Habla.
            body:
               properties:
                  name:
                     type: string
                     required: false
                  preferences:
                     type: object
                     required: false
                     properties:
                        private:
                           description: Private preferences only available to the team administrators.
                           type: object
                           required: false
               example: |
                  {
                     "name": "My Org",
                     "preferences": {
                        "abc": "def",
                        "private": {
                           "xyz": "123"
                        }
                     }
                  }
            responses:
               204:
                  description: |
                     NO_CONTENT<br />
                     The team was updated successfully.
               404:
                  description: |
                     NOT_FOUND<br />
                     The `team` with the specified ID was not found.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user is not allowed to update the specified team.

   /getMembers:
      /{teamId}:
         uriParameters:
            teamId:
               description: Team ID.
         get:
            description: |
               Retrieve the members (i.e. users) of a team given the team ID.
            responses:
               200:
                  description: |
                     OK
                  body:
                     properties:
                        teamMembers:
                           type: array
                           required: true
                           items:
                              properties:
                                 userId:
                                    type: string
                                    required: true
                                 firstName:
                                    type: string
                                    required: true
                                 lastName:
                                    type: string
                                    required: true
                                 displayName:
                                    type: string
                                    required: true
                                 icon:
                                    description: Base64 representation.
                                    type: string | nil
                                    required: false
                                    default: nil
                                 userType:
                                    type: string
                                    required: true
                                 preferences:
                                    type: object
                                    required: true
                     example: |
                        {
                           "teamMembers": [
                              {
                                 "userId": "9dec8947-0381-4809-a053-b56777f782f4",
                                 "firstName": "Anthony",
                                 "lastName": "Daga",
                                 "displayName": "Anthony Dude Daga",
                                 "icon": null,
                                 "userType": "hablaUser",
                                 "preferences": {
                                 }
                              },
                              {
                                 "userId": "9dec8947-0381-4809-a053-b56777f782f5",
                                 "firstName": "Jill",
                                 "lastName": "Goodacre",
                                 "displayName": "Jill Goodacre",
                                 "icon": null,
                                 "userType": "hablaUser",
                                 "preferences": {
                                 }
                              }
                           ]
                        }
               404:
                  description: |
                     NOT_FOUND<br />
                     The team with the given `teamId` doesn't exist.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to view this team.

   /inviteMembers:
      /{teamId}:
         uriParameters:
            teamId:
               description: Team ID to invite users to.
         post:
            description: |
               Invite a user to the specified team.
               The requesting user must be an admin of the specified team.
            body:
               properties:
                  userIds:
                     type: array
                     required: true
                     minItems: 1
                     items:
                        type: string
                        required: true
               example: |
                  {
                     "userIds": [
                        "9dec8947-0381-4809-a053-b56777f782f4"
                     ]
                  }
            responses:
               202:
                  description: |
                     ACCEPTED<br />
                     The specified users have been invited and pending acceptance.
               404:
                  description: |
                     NOT_FOUND<br />
                     The team with the given `teamId` doesn't exist, or invitee userId doesn't exist.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to invite users to this team.

   /replyToInvite:
      /{teamId}:
         uriParameters:
            teamId:
               description: Team ID to accept/decline invite to.
         post:
            description: |
               Accept or decline an invite to the specified team.
            body:
               properties:
                  accept:
                     type: boolean
                     required: true
               example: |
                  {
                     "accept": true
                  }
            responses:
               200:
                  description: |
                     OK<br />
                     The specified users has been added as a member to the team.
               404:
                  description: |
                     NOT_FOUND<br />
                     The invitation or team was not found.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to reply to the invite.


/teamRooms:

   /getTeamRooms:
      get:
         description: |
            Retrieve the team rooms that the authenticated user is privy to.
         queryParameters:
            teamId:
               description: Narrow the results to team rooms of a team.
               type: string
               required: false
               example: /teamRooms/getTeamRooms?teamId=9dec8947-0381-4809-a053-b56777f782f4
            subscriberOrgId:
               description: Narrow the results to team rooms within a subscriberOrg.  If teamId is specified, this is ignored.
               type: string
               required: false
               example: /teamRooms/getTeamRooms?subscriberOrgId=9dec8947-0381-4809-a053-b56777f782f4
         responses:
            200:
               description: |
                  OK
               body:
                  properties:
                     teamRooms:
                        type: array
                        required: true
                        items:
                           properties:
                              teamRoomId:
                                 type: string
                                 required: true
                              teamId:
                                 type: string
                                 required: true
                              name:
                                 type: string
                                 required: true
                              purpose:
                                 type: string | nil
                                 required: false
                                 default: nil
                              publish:
                                 type: boolean
                                 required: true
                              active:
                                 type: boolean
                                 required: true
                  example: |
                     {
                        "teamRooms": [
                           {
                              "teamRoomId": "9dec8947-0381-4809-a053-b56777f782f4",
                              "teamId": "ea794510-cea6-4132-0008-a7ae1d32abb5",
                              "name": "Posse",
                              "purpose": "Place to hang.",
                              "publish": false,
                              "active": true
                           },
                           {
                              "teamRoomId": "9dec8947-0381-4809-a053-b56777f782f5",
                              "teamId": "ea794510-cea6-4132-0008-a7ae1d32abb5",
                              "name": "Friends",
                              "purpose": "My buddies.",
                              "publish": true,
                              "active": true
                           }
                        ]
                     }

   /createTeamRoom:
      /{teamId}:
         uriParameters:
            teamId:
               description: Team ID to create the team room under.
         post:
            description: |
               Create a team room within a team.
            body:
               properties:
                  name:
                     type: string
                     required: true
                  purpose:
                     type: string | nil
                     required: false
                     default: nil
                  publish:
                     type: boolean
                     required: true
                  active:
                     type: boolean
                     required: true
               example: |
                  {
                     "name": "Posse",
                     "purpose": "Place to hang.",
                     "publish": false,
                     "active": true
                  }
            responses:
               201:
                  description: CREATED
                  body:
                     properties:
                        teamRoomId:
                           type: string
                           required: true
                           example: 9dec8947-0381-4809-a053-b56777f782f4
                        teamId:
                           type: string
                           required: true
                           example: 9dec8947-0381-4809-a053-b56777f782f5
                        name:
                           type: string
                           required: true
                        purpose:
                           type: string | nil
                           required: false
                           default: nil
                        publish:
                           type: boolean
                           required: true
                        active:
                           type: boolean
                           required: true
                     example: |
                        {
                          "teamRoomId": "9dec8947-0381-4809-a053-b56777f782f4",
                          "teamId": "9dec8947-0381-4809-a053-b56777f782f5",
                          "name": "Posse",
                          "purpose": "Place to hang.",
                          "publish": false,
                          "active": true
                        }
               409:
                  description: |
                     CONFLICT<br />
                     A team room by the requested name already exists under the team.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user is not allowed to create a team room within the specified team.

   /updateTeamRoom:
      /{teamRoomId}:
         uriParameters:
            teamRoomId:
               description: Team room to update.
         patch:
            description: |
               Update a team room in Habla.
            body:
               properties:
                  name:
                     type: string
                     required: true
                  purpose:
                     type: string | nil
                     required: false
                     default: nil
                  publish:
                     type: boolean
                     required: true
                  active:
                     type: boolean
                     required: true
                  preferences:
                     type: object
                     required: false
                     properties:
                        private:
                           description: Private preferences only available to the team administrators.
                           type: object
                           required: false
               example: |
                  {
                     "name": "My Org",
                     "publish": true,
                     "active": false,
                     "preferences": {
                        "abc": "def",
                        "private": {
                           "xyz": "123"
                        }
                     }
                  }
            responses:
               204:
                  description: |
                     NO_CONTENT<br />
                     The team was updated successfully.
               404:
                  description: |
                     NOT_FOUND<br />
                     The `team` with the specified ID was not found.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user is not allowed to update the specified team.

   /getMembers:
      /{teamRoomId}:
         uriParameters:
            teamRoomId:
               description: Team room ID.
         get:
            description: |
               Retrieve the members (i.e. users) of a team room given the team room ID.
            responses:
               200:
                  description: |
                     OK
                  body:
                     properties:
                        teamRoomMembers:
                           type: array
                           required: true
                           items:
                              properties:
                                 userId:
                                    type: string
                                    required: true
                                 firstName:
                                    type: string
                                    required: true
                                 lastName:
                                    type: string
                                    required: true
                                 displayName:
                                    type: string
                                    required: true
                                 icon:
                                    description: Base64 representation.
                                    type: string | nil
                                    required: false
                                    default: nil
                                 userType:
                                    type: string
                                    required: true
                                 preferences:
                                    type: object
                                    required: true
                     example: |
                        {
                           "teamRoomMembers": [
                              {
                                 "userId": "9dec8947-0381-4809-a053-b56777f782f4",
                                 "firstName": "Anthony",
                                 "lastName": "Daga",
                                 "displayName": "Anthony Dude Daga",
                                 "icon": null,
                                 "userType": "hablaUser",
                                 "preferences": {
                                 }
                              },
                              {
                                 "userId": "9dec8947-0381-4809-a053-b56777f782f5",
                                 "firstName": "Jill",
                                 "lastName": "Goodacre",
                                 "displayName": "Jill Goodacre",
                                 "icon": null,
                                 "userType": "hablaUser",
                                 "preferences": {
                                 }
                              }
                           ]
                        }
               404:
                  description: |
                     NOT_FOUND<br />
                     The team room with the given `teamRoomId` doesn't exist.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to view this team room.

   /inviteMembers:
      /{teamRoomId}:
         uriParameters:
            teamRoomId:
               description: Team room ID to invite users to.
         post:
            description: |
               Invite a user to the specified team room.
               The requesting user must be an admin of the specified team room.
            body:
               properties:
                  userIds:
                     type: array
                     required: true
                     minItems: 1
                     items:
                        type: string
                        required: true
               example: |
                  {
                     "userIds": [
                        "9dec8947-0381-4809-a053-b56777f782f4"
                     ]
                  }
            responses:
               202:
                  description: |
                     ACCEPTED<br />
                     The specified users have been invited and pending acceptance.
               404:
                  description: |
                     NOT_FOUND<br />
                     The team room with the given `teamRoomId` doesn't exist, or invitee userId doesn't exist.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to invite users to this team room.

   /replyToInvite:
      /{teamRoomId}:
         uriParameters:
            teamId:
               description: Team room ID to accept/decline invite to.
         post:
            description: |
               Accept or decline an invite to the specified team room.
            body:
               properties:
                  accept:
                     type: boolean
                     required: true
               example: |
                  {
                     "accept": true
                  }
            responses:
               200:
                  description: |
                     OK<br />
                     The specified users has been added as a member to the team room.
               404:
                  description: |
                     NOT_FOUND<br />
                     The invitation or team room was not found.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to reply to the invite.

/conversations:

   /getConversations:
      get:
         description: |
            Retrieve the conversations that the authenticated user is privy to.
            To narrow down the results to conversations of a team room, add the `teamRoomId` query parameter.
         queryParameters:
            teamRoomId:
               description: Narrow the results to conversations of a team room.
               type: string
               required: false
               example: /conversations/getConversations?teamRoomId=9dec8947-0381-4809-a053-b56777f782f4
         responses:
            200:
               description: |
                  OK
               body:
                  properties:
                     conversations:
                        type: array
                        required: true
                        items:
                           properties:
                              conversationId:
                                 type: string
                                 required: true
                              teamRoomId:
                                 type: string
                                 required: false
                              participants:
                                 type: array
                                 required: true
                                 items:
                                    properties:
                                       userId:
                                          type: string
                                          required: true
                                       firstName:
                                          type: string
                                          required: true
                                       lastName:
                                          type: string
                                          required: true
                                       displayName:
                                          type: string
                                          required: true
                                       icon:
                                          description: Base64 representation.
                                          type: string | nil
                                          required: false
                                          default: nil
                                       userType:
                                          type: string
                                          required: true
                                       preferences:
                                          type: object
                                          required: true
                  example: |
                     {
                        "conversations": [
                           {
                              "conversationId": "9dec8947-0381-4809-a053-b56777f782f4",
                              "participants": [
                                 {
                                    "userId": "9dec8947-0381-4809-a053-b56777f782f4",
                                    "firstName": "Anthony",
                                    "lastName": "Daga",
                                    "displayName": "Anthony Dude Daga",
                                    "icon": null,
                                    "userType": "hablaUser",
                                    "preferences": {
                                    }
                                 },
                                 {
                                    "userId": "9dec8947-0381-4809-a053-b56777f782f5",
                                    "firstName": "Jill",
                                    "lastName": "Goodacre",
                                    "displayName": "Jill Goodacre",
                                    "icon": null,
                                    "userType": "hablaUser",
                                    "preferences": {
                                    }
                                 }
                              ]
                           },
                           {
                              "conversationId": "9dec8947-0381-4809-a053-b56777f782f5",
                              "teamRoomId": "9dec8947-0381-4809-a053-b56777f782f6",
                              "participants": [
                                 {
                                    "userId": "9dec8947-0381-4809-a053-b56777f782f4",
                                    "firstName": "Anthony",
                                    "lastName": "Daga",
                                    "displayName": "Anthony Dude Daga",
                                    "icon": null,
                                    "userType": "hablaUser",
                                    "preferences": {
                                    }
                                 },
                                 {
                                    "userId": "9dec8947-0381-4809-a053-b56777f782f5",
                                    "firstName": "Jill",
                                    "lastName": "Goodacre",
                                    "displayName": "Jill Goodacre",
                                    "icon": null,
                                    "userType": "hablaUser",
                                    "preferences": {
                                    }
                                 }
                              ]
                           }
                        ]
                     }

   /getTranscript:
      /{conversationId}:
         uriParameters:
            conversationId:
               description: Conversation ID.
         get:
            description: |
               Retrieve the transcript for the specified conversation.
               The transcript messages are returned in `created` descending order.
            responses:
               200:
                  description: |
                     OK
                  body:
                     properties:
                        messages:
                           type: array
                           required: true
                           items:
                              properties:
                                 messageId:
                                    type: string
                                    required: true
                                 created:
                                    description: The format is in [RFC339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14), which is a profile of [ISO 8601].
                                    type: datetime
                                    required: true
                                 createdBy:
                                    description: |
                                       `userId`
                                    type: string
                                    required: true
                                 # TODO: only in DB.
                                 #createdByDisplayName:
                                 #   type: string
                                 #   required: true
                                 messageType:
                                    enum: [ text ]
                                    required: true
                                 text:
                                    type: string
                                    required: true
                                 replyTo:
                                    description: |
                                       `messageId` this messages is attached to.  This is for threaded messages support.
                                    type: string
                                    required: false
                     example: |
                        {
                           "messages": [
                              {
                                 "messageId": "9dec8947-0381-4809-a053-b56777f782f4",
                                 "created": "2017-04-12T23:20:50.52Z",
                                 "createdBy": "9dec8947-0381-4809-a053-b56777f782f4",
                                 "messageType": "text",
                                 "text": "Alright."
                              },
                              {
                                 "messageId": "9dec8947-0381-4809-a053-b56777f782f5",
                                 "created": "2017-04-12T23:20:39.13Z",
                                 "createdBy": "9dec8947-0381-4809-a053-b56777f782f5",
                                 "messageType": "text",
                                 "text": "How's it going?"
                              }
                           ]
                        }
               404:
                  description: |
                     NOT_FOUND<br />
                     The conversation with the given `conversationId` doesn't exist.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to view this conversation.

   /{conversationId}:
      uriParameters:
         conversationId:
            description: Conversation ID for which subsequent operations are scoped.
      /createMessage:
         post:
            description: |
               Create a message in a specified conversation.
            body:
               properties:
                  messageType:
                     type: string
                     required: true
                  text:
                     type: string
                     required: true
                  replyTo:
                     description: |
                        `messageId` this message is attached to.  This is for threaded messages support.
                     type: string
                     required: false
               example: |
                  {
                     "messageType": "text",
                     "text": "What's up?"
                  }
            responses:
               201:
                  description: CREATED
                  body:
                     properties:
                        messageId:
                           type: string
                           required: true
                        created:
                           description: The format is in [RFC339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14), which is a profile of [ISO 8601].
                           type: datetime
                           required: true
                        createdBy:
                           description: |
                              `userId`
                           type: string
                           required: true
                        messageType:
                           enum: [ text ]
                           required: true
                        text:
                           type: string
                           required: true
                        replyTo:
                           description: |
                              `messageId` this messages is attached to.  This is for threaded messages support.
                           type: string
                           required: false
                     example: |
                        {
                           "messageId": "9dec8947-0381-4809-a053-b56777f782f4",
                           "created": "2017-04-12T23:20:50.52Z",
                           "createdBy": "9dec8947-0381-4809-a053-b56777f782f4",
                           "messageType": "text",
                           "text": "Alright.",
                           "replyTo": "9dec8947-0381-4809-a053-b56777f782f5"
                        }
               404:
                  description: |
                     NOT_FOUND<br />
                     The specified conversation does not exist.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user is not allowed to create a message in the specified conversation.
