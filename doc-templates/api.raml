#%RAML 1.0
---
title: Habla API
version: v0.1.6
baseUri: https://api.habla.ai
mediaType:  application/json

documentation:
   - title: Overview
     content: |
         TODO: Overall description here...
         <br /><br />
         **Additional Possible Responses for All Endpoints**
         <br />
         503 SERVICE_UNAVAILABLE
         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A server error has occurred, typically Redis, DynamoDB, or other remote service availability.
         <br />
         500 INTERNAL_SERVER_ERROR
         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A server error has occurred, typically unforseen or unaccounted for.  Most likely a logic error.
   - title: Auth
     content: |
         TODO: Auth overall description here...
   - title: Users
     content: |
         TODO: Users overall description here...


/auth:

   /login:
      post:
         description: |
            Login to Habla API, receiving a JWT token for use in authenticated requests.
            <br /><br />
            Returns a valid [JWT token](http://jwt.io), along with public user details if successful (200-OK).
            This token must be stored for future API requests.
            <br /><br />
            A token will expire after a customer-specified session timeout (1 hour by default).
            A logout function may be implemented client-side that destroys the token in the client framework; however, the token will remain active until its expiry time has been exceeded.
            For this reason, it is recommended that the token be stored in a secure cookie on web clients or some secure storage mechanism for other applications.
            <br /><br />
            For security reasons, separate messages will not be provided for user not found versus authentication failure.
            This is to prevent information leakage to malicious users.
         body:
            application/x-www-form-urlencoded:
               properties:
                  username:
                     description: The user name to authenticate.
                     type: string
                     required: true
                     example: anthony.daga%40habla.ai
                  pasword:
                     description: The password to authenticate.
                     type: string
                     required: true
                     example: HelloWorld#123
         responses:
            200:
               description: |
                  OK<br />
                  The token is the JWT used in authenticated API calls requiring security.
               body:
                  properties:
                     status:
                        type: string
                        required: true
                     token:
                        type: string
                        required: true
                     user:
                        type: object
                        properties:
                           username:
                              type: string
                              required: true
                           email:
                              type: string
                              required: true
                           firstName:
                              type: string
                              required: true
                           lastName:
                              type: string
                              required: true
                           displayName:
                              type: string
                              required: true
                           country:
                              type: string
                              required: true
                           timeZone:
                              type: string
                              required: true
                           icon:
                              description: Base64 representation.
                              type: string | nil
                              required: false
                              default: nil
                           userType:
                              type: string
                              required: true
                  example: |
                     {
                       "status": "SUCCESS",
                       "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFudGhvbnlAaGFibGEuaW8iLCJpYXQiOjE0OTE0MjgzMTN9.pWU5yv5JvNMe6Tm1o7oKlI6cHmcmJZP5m20n-UXJzc0",
                       "user": {
                         "username": "anthony@habla.io",
                         "email": "anthony@habla.io",
                         "firstName": "Anthony",
                         "lastName": "Daga",
                         "displayName": "Anthony Dude Daga",
                         "country": "US",
                         "timeZone": "America/Los_Angeles",
                         "icon": null,
                         "userType": "hablaUser"
                       }
                     }
            401:
               description: |
                  UNAUTHORIZED<br />
                  No reason is given for privacy purposes, but could be an unknown username or bad password.


/users:
   /createUser:
      post:
         description: |
            Create a user in Habla.
            <br /><br />
            TODO: Was /users.
         body:
               properties:
                  firstName:
                     type: string
                     required: true
                     example: Anthony
                  lastName:
                     type: string
                     required: true
                     example: Daga
                  displayName:
                     type: string
                     required: true
                     example: Dude
                  email:
                     type: string
                     required: true
                     example: anthony.daga@habla.ai
                  password:
                     type: string
                     required: true
                     description: Clear text password.
                     example: HelloWorld#123
                  country:
                     description: |
                        [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) representation.
                     type: string
                     required: true
                     example: US
                  timeZone:
                     type: string
                     required: true
                     example: America/Los_Angeles
                  icon:
                     description: The user's avatar, base64 of image.
                     type: string | nil
                     required: false
                     default: nil
               example:
                  {
                     "firstName": "Anthony",
                     "lastName": "Daga",
                     "displayName": "Dude",
                     "email": "anthony.daga@habla.ai",
                     "password": "HelloWorld#123",
                     "country": "US",
                     "timeZone": "America/Los_Angeles",
                     "icon": null
                  }
         responses:
            201:
               description: |
                  CREATED
                  <br />TODO: Was 200 OK.
            400:
               description: |
                  FORBIDDEN<br />
                  The user (specifically email) is already registered.

   /registerUser:
      post:
         description: |
            If a user submits a registration for a valid email address (formatted correctly), the service responds with a 200-OK status and a payload.  The payload includes a uuid field, which contains the reservation-id for the user.  The reservation-id is used by the validateEmail endpoint to mitigate hacking risks, and locates the associated email address in the Redis cache.  This registration is stored in cache for a defined time-to-live (TTL).  If the user does not respond to the email and complete registration prior to expiration of the registration, they must register again.
            <br /><br />
            A reservation is a uniquely generated key used in the process of securely registering a new user.
            It is used in initial communication through email, web, and mobile clients.
            There can be multiple reservations for a user/email concurrently existing, as actual registered user uniqueness is enforced later in the process when the user is actually created in the system.
            The default expiration of a reservation is 30 minutes, after which it is cleared from cache and no longer valid.
         body:
            application/x-www-form-urlencoded:
               properties:
                  email:
                     description: |
                        The email address to register.
                        Should be validated client-side prior to invocation to ensure that a properly formatted email address has been provided by the calling application.
                     type: string
                     required: true
                     example: anthony.daga%40habla.ai
         responses:
            201:
               description: |
                  CREATED<br />
                  The uuid is the Reservation ID (rid).
                  TODO: Was 200 OK.
               body:
                  properties:
                     status:
                        type: string
                        required: true
                        example: SUCCESS
                     uuid:
                        type: string
                        required: true
                        example: 9dec8947-0381-4809-a053-b56777f782f4
                  example: |
                     {
                       "status": "SUCCESS",
                       "uuid": "9dec8947-0381-4809-a053-b56777f782f4"
                     }
            400:
               description: |
                  BAD_REQUEST<br />
                  No reason is given for privacy purposes, but could be an unknown username or bad password.

   /validateEmail:
      /{rid}:
         uriParameters:
            rid:
               description: Reservation ID (rid).
         get:
            description: |
               Retrieve the email address associated with a Reservation ID (`rid`).
               <br /><br />
               The reservation should have been previously created from the `POST /users/registerUser` endpoint, and is valid until expired.
               Use this method to obtain the email address associated with a rid, typically for display purposes.
            responses:
               200:
                  description: |
                     OK<br />
                     The uuid is the Reservation ID (rid).
                  body:
                     properties:
                        status:
                           type: string
                           required: true
                           example: SUCCESS
                        email:
                           type: string
                           required: true
                           example: anthony.daga%40habla.ai
                     example: |
                        {
                          "status": "SUCCESS",
                          "email": "anthony.daga%40habla.ai"
                        }
               404:
                  description: |
                     NOT_FOUND<br />
                     The Reservation ID either does not exist or is no longer valid (i.e. expired).


/teams:
  /getTeams:
      get:
         description: |
            Retrieve the teams that the authenticated user is privy to.
         responses:
            200:
               description: |
                  OK
               body:
                  properties:
                     teams:
                        type: array
                        required: true
                        items:
                           properties:
                              name:
                                 type: string
                                 required: true
                              purpose:
                                 type: string | nil
                                 required: false
                                 default: nil
                              teamId:
                                 description: The team to attach this room to.
                                 type: string
                                 required: true
                              publish:
                                 type: boolean
                                 required: true
                              active:
                                 type: boolean
                                 required: true
                  example: |
                     {
                        "teams": [
                           {
                              "name": "Posse",
                              "purpose": "Place to hang.",
                              "teamId": "9dec8947-0381-4809-a053-b56777f782f4",
                              "publish": false,
                              "active": true
                           },
                           {
                              "name": "Friends",
                              "purpose": "My buddies.",
                              "teamId": "9dec8947-0381-4809-a053-b56777f782f5",
                              "publish": true,
                              "active": true
                           }
                        ]
                     }


/teamRooms:
   /createTeamRoom:
      post:
         description: |
            Create a team room in Habla.
         body:
            properties:
               name:
                  type: string
                  required: true
               purpose:
                  type: string | nil
                  required: false
                  default: nil
               teamId:
                  description: The team to attach this room to.
                  type: string
                  required: true
               publish:
                  type: boolean
                  required: true
               active:
                  type: boolean
                  required: true
            example:
               {
                  "name": "Posse",
                  "purpose": "Place to hang.",
                  "teamId": "9dec8947-0381-4809-a053-b56777f782f4",
                  "publish": false,
                  "active": true
               }
         responses:
            201:
               description: CREATED
               body:
                  properties:
                     teamRoomId:
                        type: string
                        required: true
                        example: 9dec8947-0381-4809-a053-b56777f782f4
                  example: |
                     {
                       "teamRoomId": "9dec8947-0381-4809-a053-b56777f782f4"
                     }
            409:
               description: |
                  CONFLICT<br />
                  A team room by the requested name already exists under the team.
               body:
                  properties:
                     status:
                        type: string
                        required: true
                        example: EXISTS
                  example: |
                     {
                       "status": "EXISTS"
                     }

   /getMembers:
      /{teamRoomId}:
         uriParameters:
            teamRoomId:
               description: Team room ID.
         get:
            description: |
               Retrieve the members (i.e. users) of a team room given the team room ID.
            responses:
               200:
                  description: |
                     OK
                  body:
                     properties:
                        members:
                           type: array
                           required: true
                           items:
                              properties:
                                 userId:
                                    type: string
                                    required: true
                                 firstName:
                                    type: string
                                    required: true
                                 lastName:
                                    type: string
                                    required: true
                                 displayName:
                                    type: string
                                    required: true
                                 icon:
                                    description: Base64 representation.
                                    type: string | nil
                                    required: false
                                    default: nil
                                 userType:
                                    type: string
                                    required: true
                     example: |
                        {
                           "members": [
                              {
                                 "userId": "9dec8947-0381-4809-a053-b56777f782f4",
                                  "firstName": "Anthony",
                                  "lastName": "Daga",
                                  "displayName": "Anthony Dude Daga",
                                  "icon": null,
                                  "userType": "hablaUser"
                              },
                              {
                                 "userId": "9dec8947-0381-4809-a053-b56777f782f5",
                                  "firstName": "Jill",
                                  "lastName": "Goodacre",
                                  "displayName": "Jill Goodacre",
                                  "icon": null,
                                  "userType": "hablaUser"
                              }
                           ]
                        }
               404:
                  description: |
                     NOT_FOUND<br />
                     The team room with the given `teamRoomId` doesn't exist.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to view this team room.

/conversations:
   /startConversationWithUsers:
      post:
         description: |
            Begin a conversation with the specified users.
            The requesting user is automatically included in the conversation.
         body:
            properties:
               users:
                  type: array
                  required: true
                  items:
                     properties:
                        userId:
                           type: string
                           required: true
            example: |
               {
                  "users": [
                     {
                        "userId": "9dec8947-0381-4809-a053-b56777f782f4"
                     },
                     {
                        "userId": "9dec8947-0381-4809-a053-b56777f782f5"
                     }
                  ]
               }
         responses:
            201:
               description: CREATED
               body:
                  properties:
                     conversationId:
                        type: string
                        required: true
                     transcriptExists:
                        description: |
                           True if a conversation already exists for the specified group of users.
                           Refer to GET /conversations/getTranscript to retrieve the transcript.
                        type: boolean
                        required: true
                  example: |
                     {
                       "conversationId": "9dec8947-0381-4809-a053-b56777f782f4",
                       "transcriptExists": false
                     }
            400:
               description: |
                  BAD_REQUEST<br />
                  One or more of the specified users does not exist.
               body:
                  properties:
                     users:
                        type: array
                        required: true
                        items:
                           properties:
                              userId:
                                 type: string
                                 required: true
                  example: |
                     {
                        "users": [
                           {
                              "userId": "9dec8947-0381-4809-a053-b56777f782f4"
                           },
                           {
                              "userId": "9dec8947-0381-4809-a053-b56777f782f5"
                           }
                        ]
                     }

   /getTranscript:
      /{conversationId}:
         uriParameters:
            conversationId:
               description: Conversation ID.
         get:
            description: |
               Retrieve the transcript for the specified conversation.
               The transcript messages are returned in `created` descending order.
            responses:
               200:
                  description: |
                     OK
                  body:
                     properties:
                        messages:
                           type: array
                           required: true
                           items:
                              properties:
                                 created:
                                    description: The format is in [RFC339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14), which is a profile of [ISO 8601].
                                    type: datetime
                                    required: true
                                 createdBy:
                                    description: |
                                       `userId`
                                    type: string
                                    required: true
                                 # TODO: only in DB.
                                 #createdByDisplayName:
                                 #   type: string
                                 #   required: true
                                 messageType:
                                    enum: [ text ]
                                    required: true
                                 text:
                                    type: string
                                    required: true
                     example: |
                        {
                           "messages": [
                              {
                                 "created": "2017-04-12T23:20:50.52Z",
                                 "createdBy": "9dec8947-0381-4809-a053-b56777f782f4",
                                 "messageType": "text",
                                 "text": "Alright."
                              },
                              {
                                 "created": "2017-04-12T23:20:39.13Z",
                                 "createdBy": "9dec8947-0381-4809-a053-b56777f782f5",
                                 "messageType": "text",
                                 "text": "How's it going?"
                              }
                           ]
                        }
               404:
                  description: |
                     NOT_FOUND<br />
                     The conversation with the given `conversationId` doesn't exist.
               403:
                  description: |
                     FORBIDDEN<br />
                     The user doesn't have permissions to view this conversation.
