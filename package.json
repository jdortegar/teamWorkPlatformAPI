{
  "name": "habla-fe-api",
  "description": "The Habla Front-end API",
  "version": "0.1.6",
  "private": true,
  "main": "dist/index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Habla-Inc/hablaapi.git"
  },
  "bugs": {
    "url": "https://github.com/Habla-Inc/hablaapi/issues"
  },
  "homepage": "http://habla.io",
  "author": "Robert Abbott <robert.abbott@habla.ai>, Anthony Daga <anthony.daga@habla.ai>",
  "license": "HABLA",
  "engines": {
    "node": ">=6"
  },
  "pre-commit": [
    "lint",
    "test"
  ],
  "scripts": {
    "start": "nodemon $NODE_DEBUG_OPTION src/index.js --exec babel-node",
    "debug": "nodemon src/index.js --exec babel-node --debug",
    "lint": "eslint src",
    "test": "cross-env NODE_ENV=test jest",
    "watch:test": "npm run test -- --watch",
    "doc": "esdoc && npm run raml && npm run md",
    "build": "cross-env NODE_ENV=production babel -s true src -d dist",
    "start:prod": "cross-env NODE_ENV=production babel -s true src -d dist && node dist",
    "monitor": "nodejs-dashboard -- node -r nodejs-dashboard dist",
    "clean": "shx rm -rf dist coverage doc",
    "pristine": "npm run clean && shx rm -rf node_modules",

    "raml": "shx mkdir -p doc && raml2html doc-templates/api.raml > doc/api.html",
    "md": "npm run md:users && npm run md:auth",
    "md:users": "shx mkdir -p doc/api && shx cat doc-templates/api/md-pre.html > doc/api/users.html && marked -i doc-templates/api/users.md >> doc/api/users.html && shx cat doc-templates/api/md-post.html >> doc/api/users.html",
    "md:auth": "shx mkdir -p doc/api && shx cat doc-templates/api/md-pre.html > doc/api/auth.html && marked -i doc-templates/api/auth.md >> doc/api/auth.html && shx cat doc-templates/api/md-post.html >> doc/api/auth.html"
  },
  "babel": {
    "presets": [
      "es2015-node6",
      "stage-0"
    ],
    "env": {
      "production": {
        "plugins": [
          "add-module-exports"
        ],
        "presets": [
          "babili",
          "es2015",
          "stage-0"
        ]
      }
    }
  },
  "devDependencies": {
    "babel-cli": "^6.24.0",
    "babel-eslint": "^7.2.0",
    "babel-istanbul": "^0.12.2",
    "babel-node-debug": "^2.0.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-babili": "0.0.12",
    "babel-preset-env": "^1.2.2",
    "babel-preset-es2015": "^6.24.0",
    "babel-preset-es2015-node6": "^0.4.0",
    "babel-preset-stage-0": "^6.22.0",
    "babel-register": "^6.24.0",
    "babili": "0.0.12",
    "cross-env": "^3.2.4",
    "esdoc": "^0.5.2",
    "eslint": "^3.18.0",
    "eslint-config-airbnb": "^14.1.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^4.0.0",
    "eslint-plugin-react": "^6.10.2",
    "jest": "^19.0.2",
    "marked": "^0.3.6",
    "nodejs-dashboard": "^0.4.0",
    "nodemon": "^1.11.0",
    "pre-commit": "^1.2.2",
    "raml2html": "^6.1.0",
    "shx": "^0.2.2",
    "sinon": "^2.0.0"
  },
  "dependencies": {
    "aws-sdk": "^2.28.0",
    "babel-cli": "^6.24.0",
    "babel-eslint": "^7.2.0",
    "babel-istanbul": "^0.12.2",
    "babel-jest": "^19.0.0",
    "babel-node-debug": "^2.0.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-babili": "0.0.12",
    "babel-preset-env": "^1.2.2",
    "babel-preset-es2015": "^6.24.0",
    "babel-preset-es2015-node6": "^0.4.0",
    "babel-preset-stage-0": "^6.22.0",
    "babel-register": "^6.24.0",
    "babili": "0.0.12",
    "bcryptjs": "^2.4.3",
    "bluebird": "^3.5.0",
    "body-parser": "^1.17.1",
    "cors": "^2.8.1",
    "cross-env": "^3.2.4",
    "express": "^4.15.2",
    "express-jwt": "^5.1.0",
    "express-validation": "^1.0.2",
    "http-status": "^1.0.1",
    "joi": "^10.2.2",
    "lodash": "^4.17.4",
    "moment": "^2.18.1",
    "morgan": "^1.8.1",
    "nodemailer": "^3.1.7",
    "redis": "^2.7.1",
    "socket.io": "^1.7.3",
    "socket.io-redis": "^4.0.0",
    "socketio-jwt": "^4.5.0",
    "uuid": "^3.0.1"
  },

  "jest": {
    "verbose": true,
    "globals": {
      "__DEV__": true
    },
    "testMatch": [
      "**/__tests__/**/*spec.js?(x)"
    ],
    "collectCoverage": true,
    "coverageReporters": [
      "text",
      "lcov",
      "html"
    ]
  }
}
